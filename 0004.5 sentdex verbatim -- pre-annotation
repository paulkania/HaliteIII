import hlt
from hlt import constants
from hlt.positionals import Direction
import random
import logging
#0004

game = hlt.Game()   # At this point "game" variable is populated with initial map data.
# This is a good place to do computationally expensive start-up pre-processing.


# As soon as you call "ready" function below, the 2 second per turn timer will start.
game.ready("MyPythonBot")

logging.info("Successfully created bot! My Player ID is {}.".format(game.my_id))

""" <<<Game Loop>>> """

while True:

    game.update_frame()

    me = game.me
    game_map = game.game_map

    command_queue = []
    direction_order = [Direction.North,Direction.South,Direction.East,Direction.West,Direction.Still]
    position_choices = [] 

    for ship in me.get_ships():
        position_options = ship.position.get_surrounding_cardinals() + [ship.position] #log returns N,S,E,W(19,26) + ship pos(19,25)

        position_dict = {} #key == NSEW (0,1) ; value == absolute co-ord (19,38)
        halite_dict = {} #key == NSEW (0,1) ; value == halite_amount

        for n, direction in enumerate(direction_order): #"n, direction means they are both looping, like 'n and char'"..it's
            position_dict[direction] = position_options[n]

        for directioni in position_dict: #does direction in this loop reference p
            position = position_dict[directioni] #position is defined as the VALUE tuple of pos_dict
            halite_amount = game_map[position].halite_amount #halite_amount is defined as the amount of H at the certain card-coord
            if position_dict[directioni] not in position_choices:
                halite_dict[directioni]=halite_amount #
            else:
                logging.info("attempting to move to same spot as another \n")


        if game_map[ship.position].halite_amount < constants.MAX_HALITE / 10 or ship.is_full and not game_map[ship.position].is_occupied:
            directional_choice = max(halite_dict, key=halite_dict.get)
            position_choices.append(position_dict[directional_choice])
            command_queue.append(ship.move(directional_choice))
                
        else: #right now elif conditions are such that ship.is.full
            position_choices.append(position_dict[directional_choice])
            command_queue.append(ship.stay_still())


    if game.turn_number % 10 == 0 and me.halite_amount >= constants.SHIP_COST and not game_map[me.shipyard].is_occupied:
        command_queue.append(me.shipyard.spawn())
    if game.turn_number  == 1 and not game_map[me.shipyard].is_occupied:
        command_queue.append(me.shipyard.spawn())

    # Send your moves back to the game environment, ending this turn.
    game.end_turn(command_queue)
