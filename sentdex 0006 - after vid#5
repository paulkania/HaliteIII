import hlt
from hlt import constants
from hlt.positionals import Direction
import random
import logging
#0004

game = hlt.Game()   # At this point "game" variable is populated with initial map data.
# This is a good place to do computationally expensive start-up pre-processing.


# As soon as you call "ready" function below, the 2 second per turn timer will start.
game.ready("MyPythonBot")

logging.info("Successfully created bot! My Player ID is {}.".format(game.my_id))

""" <<<Game Loop>>> """
ship_states={}

while True:

    game.update_frame()

    me = game.me
    game_map = game.game_map

    command_queue = []  #empty list that will be filled (below) with commands per ship
    direction_order = [Direction.North,Direction.South,Direction.East,Direction.West,Direction.Still] # (1,-1)etc. type:tuples list.
    position_choices = [] #empty list that will be filled in choices(line 42 is used to prevent 2 ships using the same choice)

    for ship in me.get_ships():
        if ship.id not in ship_states:
            ship_states[ship.id] = "collecting"


        position_options = ship.position.get_surrounding_cardinals() + [ship.position] # returns (19,26) + ship pos(19,25)

        position_dict = {} #key == NSEW (0,1) ; value == absolute co-ord (19,38)
        halite_dict = {} #key == NSEW (0,1) ; value == halite_amount

        for n, direction in enumerate(direction_order): #'n'->enumerated index (0,1,2..n) 'direction -> actual direction order ((0,1),(0,-1) defined in line 27)
            position_dict[direction] = position_options[n] #direction previous line is now the key of previously empty position_dict{}. values are positions options defined in line 31 which are (19,26)type. it is now organized like showin in comment of line 33.

        for directioni in position_dict: #for each key:value [(0,1),(19,26)] pair
            position = position_dict[directioni] #position is defined as the VALUE tuple of pos_dict. position is a newly defined variable (does not appear about this line.)
            halite_amount = game_map[position].halite_amount #halite_amount is newly defined variable, defined as the amount of H at the certain map co-ordinate (19,16ref)
            if position not in position_choices: #1stwitch from out of sentdex. switched 'positional_dict[directioni]' with 'position'since it's the same definition line40, (trivial change).
                                                    #line above says - if this position (19,26) is not already in position_choices (from an earlier ships iteration), then:
                halite_dict[directioni]=halite_amount ##PIVOT LINE##. halite_dict[directioni] where directioni is the key, is defined as halite_amount, which is the value. so halite_dict is [directioni:halite_amount]
            else:
                logging.info("attempting to move to same spot as another \n")

        if ship_states[ship.id]  =="depositing": #cant send 2 commands, thats why this line is here. (8.00min-vid#5)
            move = game_map.naive_navigate(ship, me.shipyard.position)
            position_choices.append(position_dict[move])
            command_queue.append(ship.move(move))
            #if move == Direction.Still:
            #    ship_states[ship.id] = "collecting"


        elif ship_states[ship.id] == "collecting":
            directional_choice = max(halite_dict, key=halite_dict.get) #newly defined variable, defined as max halite dict(key decides where to count from, which is halite_amount(halite_dict.get() is get the Value value(as opposed to key value)))
            dc= position_dict[directional_choice] #PR trivial edit
            position_choices.append(dc) #append position choices with directional choice.
            command_queue.append(ship.move(directional_choice))
            if ship.halite_amount > constants.MAX_HALITE *0.80:
                ship_states[ship.id] = "depositing"

        if ship.position == me.shipyard.position:
            ship_states = "collecting"

    if game.turn_number % 10 == 0 and me.halite_amount >= constants.SHIP_COST and not game_map[me.shipyard].is_occupied:
        command_queue.append(me.shipyard.spawn())
    if game.turn_number  == 1 and not game_map[me.shipyard].is_occupied:
       command_queue.append(me.shipyard.spawn())

    # Send your moves back to the game environment, ending this turn.
    game.end_turn(command_queue)
